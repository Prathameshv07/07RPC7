-----------------------------------------
P1-A-PrimeNumber
-----------------
svrPrime.java
-------
import java.io.*;
import java.net.*;

public class a_svrPrime {
    public static void main(String[] args) throws IOException {
        try (ServerSocket ss = new ServerSocket(8001)) {
            while (true) {
                System.out.println("Server started...");
                try (Socket s = ss.accept();
                     DataInputStream input = new DataInputStream(s.getInputStream());
                     DataOutputStream output = new DataOutputStream(s.getOutputStream())) {

                    int number = input.readInt();
                    String result = (isPrime(number)) ? " is Prime" : " is not Prime";
                    output.writeUTF(number + result);
                }
            }
        }
    }

    private static boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n <= 3) return true;

        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
}

--------------
clntPrime.java
---------
import java.io.*;
import java.net.*;

public class a_clntPrime {
    public static void main(String[] args) throws IOException {
        try (Socket s = new Socket("localhost", 8001);
             BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
             DataOutputStream output = new DataOutputStream(s.getOutputStream());
             DataInputStream inputFromServer = new DataInputStream(s.getInputStream())) {

            System.out.print("Enter your number: ");
            int number = Integer.parseInt(input.readLine());

            output.writeInt(number);
            System.out.println(inputFromServer.readUTF());
        }
    }
}

---------------------------------

P1-B-Chatting
----------------
svrchat.java
-------------
import java.io.*;
import java.net.*;

public class b_svrchat {
    public static void main(String[] args) throws IOException {
        try (ServerSocket ss = new ServerSocket(8001)) {
            System.out.println("Server started...");
            try (Socket s = ss.accept();
                 BufferedReader input = new BufferedReader(new InputStreamReader(s.getInputStream()));
                 PrintWriter output = new PrintWriter(s.getOutputStream(), true)) {

                String message;
                while ((message = input.readLine()) != null) {
                    if (message.equals("STOP")) break;
                    System.out.println("Client says: " + message);
                    System.out.print("Server says: ");
                    BufferedReader serverInput = new BufferedReader(new InputStreamReader(System.in));
                    String reply = serverInput.readLine();
                    output.println(reply);
                }
            }
        }
    }
}

----------------
clntchat.java
--------------
import java.io.*;
import java.net.*;

public class b_clntchat {
    public static void main(String[] args) throws IOException {
        try (Socket s = new Socket("localhost", 8001);
             BufferedReader inputsvr = new BufferedReader(new InputStreamReader(s.getInputStream()));
             PrintWriter output = new PrintWriter(s.getOutputStream(), true);
             BufferedReader input = new BufferedReader(new InputStreamReader(System.in))) {

            System.out.println("To stop chatting with server type STOP");
            String message;
            while ((message = input.readLine()) != null) {
                output.println(message);
                if (message.equals("STOP")) break;
                System.out.print("Server says: " + inputsvr.readLine() + "\nClient says: ");
            }
        }
    }
}

----------------------------------

P2-A-EvenOdd
-----------------
svrUDPevod.java
----------------
import java.io.*;
import java.net.*;

public class a_svrUDPevod {
    public static void main(String[] args) throws IOException {
        System.out.println("Server Started..");
        DatagramSocket socket = new DatagramSocket(2000);
        byte[] buffer = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
        socket.receive(packet);
        String str = new String(packet.getData(), 0, packet.getLength());
        int number = Integer.parseInt(str);
        String result = (number % 2 == 0) ? "Number is even" : "Number is odd";
        byte[] response = result.getBytes();
        DatagramPacket responsePacket = new DatagramPacket(response, response.length, packet.getAddress(), packet.getPort());
        socket.send(responsePacket);
        socket.close();
    }
}

--------------------
clntUDPevod.java
-----------------
import java.io.*;
import java.net.*;

public class a_clntUDPevod {
    public static void main(String[] args) throws IOException {
        DatagramSocket socket = new DatagramSocket();
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter a number: ");
        String num = input.readLine();
        byte[] data = num.getBytes();
        DatagramPacket packet = new DatagramPacket(data, data.length, InetAddress.getLocalHost(), 2000);
        socket.send(packet);
        byte[] responseBuffer = new byte[1024];
        DatagramPacket responsePacket = new DatagramPacket(responseBuffer, responseBuffer.length);
        socket.receive(responsePacket);
        String result = new String(responsePacket.getData(), 0, responsePacket.getLength());
        System.out.println(result);
        socket.close();
    }
}

-----------------------------

P2-B-Calci using RPC
----------------------
svrRPC.java
------------
import java.net.*;

public class b_svrRPC {
    public static void main(String[] args) {
        try {
            DatagramSocket ds = new DatagramSocket(1200);
            byte b[] = new byte[4096];
            while (true) {
                System.out.println("Server Started...");
                DatagramPacket dp = new DatagramPacket(b, b.length);
                ds.receive(dp);
                String[] tokens = new String(dp.getData(), 0, dp.getLength()).split(" ");
                if (tokens[0].equalsIgnoreCase("q")) System.exit(1);
                int val1 = Integer.parseInt(tokens[1]), val2 = Integer.parseInt(tokens[2]);
                int result = 0;
                switch (tokens[0]) {
                    case "add": result = val1 + val2; break;
                    case "sub": result = val1 - val2; break;
                    case "mul": result = val1 * val2; break;
                    case "div": result = val1 / val2; break;
                }
                byte b1[] = (result + "").getBytes();
                ds.send(new DatagramPacket(b1, b1.length, dp.getAddress(), 1300));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

------------------------
clntRPC.java
-------------
import java.io.*;
import java.net.*;

public class b_clntRPC {
    public static void main(String[] args) {
        try {
            DatagramSocket ds = new DatagramSocket();
            DatagramSocket ds1 = new DatagramSocket(1300);
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

            System.out.println("\n=== RPC Client ===\n");
            System.out.println("To perform a method call, enter the method name followed by parameters separated by spaces.");
            System.out.println("For example, to add two numbers, enter 'add 3 4'");
            System.out.println("Supported methods: add, sub, mul, div");
            System.out.println("Enter 'q' to quit.\n");

            while (true) {
                System.out.print("Enter method and parameters: ");
                String str = reader.readLine();
                byte b[] = str.getBytes();
                ds.send(new DatagramPacket(b, b.length, InetAddress.getLocalHost(), 1200));
                byte b1[] = new byte[1024];
                ds1.receive(new DatagramPacket(b1, b1.length));
                System.out.println("\nResult = " + new String(b1).trim() + "\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

-----------------------------
P3-MultiSocket(Broadcasting)
----------------------------
svrbroadcast.java
------------------
import java.net.*;
import java.io.*;

public class svrbroadcast {
    public static final int PORT = 12345;

    public static void main(String[] args) throws Exception {
        MulticastSocket socket = new MulticastSocket();
        InetAddress group = InetAddress.getByName("239.1.2.3");
        String message = "Broadcast message from server";
        byte[] buffer = message.getBytes();
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, group, PORT);
        while (true) {
            socket.send(packet);
            System.out.println("Broadcast message sent");
            Thread.sleep(5000); // 5 seconds delay
        }
    } 
}

------------------------
clntbroadcast.java
-------------------
import java.net.*;
import java.io.*;

public class clntbroadcast {
    public static final int PORT = 12345;
    public static final String GROUP_ADDRESS = "239.1.2.3";

    public static void main(String[] args) throws IOException {
        MulticastSocket socket = new MulticastSocket(PORT);
        InetAddress group = InetAddress.getByName(GROUP_ADDRESS);
        socket.joinGroup(group);
        byte[] buffer = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
        
        while (true) {
            socket.receive(packet);
            String receivedMessage = new String(packet.getData(), 0, packet.getLength());
            System.out.println("Received broadcast message: " + receivedMessage);
        }
    }
}

--------------------------------
P4-RMI (Date)
---------------
InterDate.java
----------------
import java.rmi.*;

public interface InterDate extends Remote {
    String display() throws Exception;
}

---------------------
svrRMI.java
------------

import java.rmi.*;
import java.rmi.server.*;
import java.util.*;
public class svrRMI extends UnicastRemoteObject implements InterDate  {
	public svrRMI() throws Exception { }
	public String display() throws Exception {
		String str = "";
		Date d = new Date();
		str = d.toString();
		return str; 
		}
	public static void main(String args[]) throws Exception {
		svrRMI s1 = new svrRMI(); 
		Naming.bind("DS", s1); //Bind the server to the RMI Registry
		System.out.println("Object registered.....");
	}
}

--------------------------
clntRMI.java

import java.rmi.*;
import java.io.*;
public class clntRMI {
	public static void main(String args[]) throws Exception {
		String s1;
		InterDate h1 = (InterDate)Naming.lookup("DS");
		s1 = h1.display();
		System.out.println(s1);
	}
}

--------------------------
Note: For Date we have to open 3 CMD (1- rmiregistry) & remaining same process from all prev. code we perform
